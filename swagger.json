{
  "openapi": "3.0.0",
  "info": {
    "title": "Secure Group Messaging API",
    "version": "1.0.0",
    "description": "API documentation for the Secure Group Messaging Backend."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "605c72cfa45e4c1bc4d8e0f3"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "Password123"
          }
        }
      },
      "JoinRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "605c72cfa45e4c1bc4d8e0f3"
          },
          "requestedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2021-03-25T10:00:00Z"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "605c72d0a45e4c1bc4d8e0f4"
          },
          "name": {
            "type": "string",
            "example": "Test Group"
          },
          "type": {
            "type": "string",
            "enum": [
              "open",
              "private"
            ],
            "example": "open"
          },
          "maxMembers": {
            "type": "integer",
            "example": 10
          },
          "owner": {
            "type": "string",
            "example": "605c72cfa45e4c1bc4d8e0f3"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "joinRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JoinRequest"
            }
          },
          "bannedMembers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2021-03-25T09:00:00Z"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "605c72e1a45e4c1bc4d8e0f5"
          },
          "groupId": {
            "type": "string",
            "example": "605c72d0a45e4c1bc4d8e0f4"
          },
          "sender": {
            "type": "string",
            "example": "605c72cfa45e4c1bc4d8e0f3"
          },
          "content": {
            "type": "string",
            "example": "Hello group!"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2021-03-25T10:05:00Z"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user with an email and password.",
        "requestBody": {
          "description": "User registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Email already in use"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Authenticates a user and returns a JWT token.",
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "jwt.token.here"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid credentials" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/groups": {
      "post": {
        "summary": "Create a new group",
        "description": "Creates a group by specifying a name, type (open or private), and maximum number of members. The authenticated user becomes the owner and first member.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Group creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "Test Group" },
                  "type": { "type": "string", "enum": ["open", "private"], "example": "open" },
                  "maxMembers": { "type": "integer", "example": 10 }
                },
                "required": ["name", "type", "maxMembers"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          },
          "400": { "description": "Bad Request" }
        }
      }
    },
    "/groups/{groupId}/join": {
      "post": {
        "summary": "Join a group",
        "description": "If the group is open, the user is immediately added as a member. If the group is private, a join request is submitted for approval.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to join",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Join successful or request submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Joined open group successfully." }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "User banned or restricted" },
          "404": { "description": "Group not found" }
        }
      }
    },
    "/groups/{groupId}/approve": {
      "post": {
        "summary": "Approve join request",
        "description": "The group owner approves a pending join request for a private group.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "User ID of the join request to approve",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string", "example": "605c72cfa45e4c1bc4d8e0f3" }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User approved and added to the group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User added to group." }
                  }
                }
              }
            }
          },
          "404": { "description": "Group or join request not found" },
          "403": { "description": "Not authorized" }
        }
      }
    },
    "/groups/{groupId}/leave": {
      "post": {
        "summary": "Leave a group",
        "description": "Allows a member (non-owner) to leave a group. In private groups, a cooldown period may apply for rejoining.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to leave",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Left group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Left group successfully."
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "403": { "description": "Owner cannot leave without transferring ownership" }
        }
      }
    },
    "/groups/{groupId}/banish": {
      "post": {
        "summary": "Banish a member from a group",
        "description": "The group owner can banish a member. The banned member must submit a new join request to rejoin.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "User ID of the member to banish",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string", "example": "605c72cfa45e4c1bc4d8e0f3" }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User banished from group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User banished from group." }
                  }
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "403": { "description": "Not authorized" }
        }
      }
    },
    "/groups/{groupId}/transfer": {
      "post": {
        "summary": "Transfer group ownership",
        "description": "Transfers group ownership from the current owner to an existing member.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "New owner user ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwnerId": { "type": "string", "example": "605c72cfa45e4c1bc4d8e0f3" }
                },
                "required": ["newOwnerId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ownership transferred successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Ownership transferred successfully." }
                  }
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "403": { "description": "Not authorized or invalid new owner" }
        }
      }
    },
    "/groups/{groupId}": {
      "delete": {
        "summary": "Delete a group",
        "description": "Deletes the group if the owner is the only member.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to delete",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Group deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Group cannot be deleted unless owner is the sole member" },
          "404": { "description": "Group not found" },
          "403": { "description": "Not authorized" }
        }
      }
    },
    "/messages/{groupId}": {
      "post": {
        "summary": "Send a message",
        "description": "Sends a message to a specified group. The message is encrypted before storage.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to send the message to",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Message content",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": { "type": "string", "example": "Hello, everyone!" }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Message sent successfully."
                    },
                    "ack": {
                      "type": "object",
                      "properties": {
                        "deliveredAt": { "type": "string", "format": "date-time", "example": "2021-03-25T10:05:00Z" }
                      }
                    },
                    "messageData": { "$ref": "#/components/schemas/Message" }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request" },
          "404": { "description": "Group not found" },
          "403": { "description": "Not authorized" }
        }
      },
      "get": {
        "summary": "Retrieve messages",
        "description": "Retrieves all messages for a specific group.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to retrieve messages from",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Message" }
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Group not found" },
          "403": { "description": "Not authorized" }
        }
      }
    }
  }
}
